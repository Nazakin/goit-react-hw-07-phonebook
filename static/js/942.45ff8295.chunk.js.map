{"version":3,"file":"static/js/942.45ff8295.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm.jsx","components/Filter.jsx","components/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux'; \nimport { addContact } from '../redux/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch(); \n  const contacts = useSelector((state) => state.contacts.contacts.items); \n\n  const handleChange = (e) => {\n    const { value, name } = e.target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    handleAddContact({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  const handleAddContact = (newContact) => {\n    const isNameExist = contacts.some((contact) => contact.name.toLowerCase() === newContact.name.toLowerCase());\n\n    if (isNameExist) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    const contactWithId = { ...newContact, id: nanoid() };\n    dispatch(addContact(contactWithId));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '20px', alignItems: 'center' }}>\n      <label style={{ display: 'flex', flexDirection: 'column', maxWidth: '150px' }}>\n        Name:\n        <input type=\"text\" name=\"name\" value={name} onChange={handleChange} required />\n      </label>\n      <label style={{ display: 'flex', flexDirection: 'column', maxWidth: '150px' }}>\n        Tel:\n        <input type=\"tel\" name=\"number\" value={number} onChange={handleChange} required />\n      </label>\n      <button type=\"submit\" style={{ maxWidth: '150px' }}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector((state) => state.filters.filters);\n\n  const handleFilterChange = (e) => {\n    const { value } = e.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <label style={{ display: 'flex', flexDirection: 'column', maxWidth: '150px', marginTop: '20px' }}>\n      Search:\n      <input type=\"text\" name=\"filter\" value={filters} onChange={handleFilterChange} />\n    </label>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../redux/operations'; \nimport { Filter } from './Filter';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector((state) => state.filters.filters);\n  const contacts = useSelector((state) => state.contacts.contacts.items);\n  const filteredContacts = contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(filters.toLowerCase())\n  );\n\n  const handleDeleteContact = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <>\n    <Filter/>\n    <ul>\n      {filteredContacts.map((contact) => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button type=\"button\" onClick={() => handleDeleteContact(contact.id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { ContactForm } from '../components/ContactForm';\nimport { ContactList } from '../components/ContactList';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/operations';\n\n\n\nexport const App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n  <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <ContactList/>\n  </div>\n  );\n};"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","contacts","useSelector","state","items","handleChange","e","_e$target","target","value","handleAddContact","newContact","some","contact","toLowerCase","alert","concat","contactWithId","_objectSpread","addContact","_jsxs","onSubmit","preventDefault","style","display","flexDirection","gap","alignItems","children","maxWidth","_jsx","type","onChange","required","Filter","filters","marginTop","setFilter","ContactList","filteredContacts","filter","includes","_Fragment","map","onClick","contactId","deleteContact","App","useEffect","fetchContacts"],"sourceRoot":""}